#!/bin/bash

# Portable and reliable way to get the PARENT directory of this script.
# (Note to `cd` before `pwd`)
# Based on http://stackoverflow.com/a/246128
# then added zsh support from http://stackoverflow.com/a/23259585 .
_TTCP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-${(%):-%N}}")"; cd ..; pwd)"
source "$_TTCP_DIR"/lib/ttcp

# __ttcp::opts is called prior to __ttcp::check_env
# Because id/password might be given by user.
__ttcp::opts "$@"
__ttcp::is_credential_valid || __ttcp::load_config || __ttcp::init
__ttcp::check_env

trap "__ttcp::unspin; kill 0; exit $_TTCP_EINTR" SIGHUP SIGINT SIGQUIT SIGTERM
__ttcp::spin "Pasting..."

check_decoding_failure() {
    local _exit_status="$1"
    if [ $_exit_status -ne 0 ]; then
        __ttcp::unspin
        echo "Failed to decode data." >&2
        echo "Please check ID/Password and Salt values." >&2
        exit $_TTCP_EDECODE
    fi
}

_HTTP_CLIENT="$(__ttcp::http_client)"

TTCP_ID_CLIP="$(echo "${TTCP_ID}${TTCP_SALT1}" | __ttcp::hash)"
TTCP_PASSWORD_CLIP="$(echo "${TTCP_PASSWORD}${TTCP_SALT1}" | __ttcp::hash)"
# TTCP_ID_TRANS="$(echo "${TTCP_ID}${TTCP_SALT2}" | __ttcp::hash)"
TTCP_PASSWORD_TRANS="$(echo "${TTCP_PASSWORD}${TTCP_ID}${TTCP_SALT2}" | __ttcp::hash)"

TTCP_LASTPASTE_PATH="${TTCP_LASTPASTE_PATH_PREFIX}${TTCP_ID}"
TTCP_LASTURL_PATH="${TTCP_LASTPASTE_PATH_PREFIX}${TTCP_ID}_url"
CLIP_BODY=$(${_HTTP_CLIENT} --fail -so- "$TTCP_CLIP_NET/$TTCP_ID_PREFIX/$TTCP_ID_CLIP" 2> /dev/null)

if [ $? -ne 0 ]; then
    __ttcp::unspin
    echo "Failed to get the content url" >&2
    exit $_TTCP_ECONTURL
fi

ENCRYPTED_TRANS_URL=$(echo "$CLIP_BODY" |
                   # Use only (extended) regular expression compatible with POSIX.
                   sed 's/<[^>]*>//g' | grep -E "TTCP\[.*\]" | head -n 1 | sed 's/^TTCP\[//;s/\]$//;' 2> /dev/null)

if [ "$ENCRYPTED_TRANS_URL" = "" ]; then
    [ -f "$TTCP_LASTURL_PATH" ] &&
        { echo "(Retrying to decrypt the url last got...)" >&2;
          # If we the url local cache, use it.
          ENCRYPTED_TRANS_URL=$(cat "$TTCP_LASTURL_PATH"); }
fi

if [ "$ENCRYPTED_TRANS_URL" = "" ]; then
    [ -f "$TTCP_LASTPASTE_PATH" ] ||
        { __ttcp::unspin;
          echo "Nothing has been copied yet." >&2;
          exit $_TTCP_ENOCONTENT; }

    __ttcp::unspin
    echo "(Pasting the last paste)" >&2
    __ttcp::decode "$TTCP_PASSWORD_TRANS" < "$TTCP_LASTPASTE_PATH"
    check_decoding_failure "$?"
    exit 0
fi

# Note: we make encrypted url's local cache.
echo "$ENCRYPTED_TRANS_URL" > "${TTCP_LASTURL_PATH}"

TRANS_URL="$(echo $ENCRYPTED_TRANS_URL | __ttcp::base64dec | __ttcp::decode "$TTCP_PASSWORD_CLIP")"
check_decoding_failure "$?"

${_HTTP_CLIENT} --fail -so- "$TRANS_URL" > "$TTCP_LASTPASTE_PATH" 2> /dev/null
if [ $? -ne 0 ]; then
    __ttcp::unspin
    echo "Failed to get the content" >&2
    exit $_TTCP_ECONTTRANS
fi

# Finally remove the url local cache.
rm -f "${TTCP_LASTURL_PATH}"

__ttcp::unspin
__ttcp::decode "$TTCP_PASSWORD_TRANS" < "$TTCP_LASTPASTE_PATH"
check_decoding_failure "$?"
exit 0
