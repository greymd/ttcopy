#!/bin/bash

# Version number of commands.
# MAJOR.MINOR.PATCH
readonly TTCP_VERSION="2.1.0"

# Error constants
# ===============

# Undefined or General errors
readonly _TTCP_EUNDEF=1

# TTCP_ID/TTCP_PASSWORD is undefined
readonly _TTCP_ENOCRED=3

# Invalid option/argument
readonly _TTCP_EINVAL=4

# Nothing has been copied yet
readonly _TTCP_ENOCONTENT=5

# Passwords do not match
readonly _TTCP_EUNMATCH=6

# Failed to encode something.
readonly _TTCP_EENCODE=7

# Failed to decode something.
readonly _TTCP_EDECODE=8

# Failed to upload/download the content
readonly _TTCP_ECONTTRANS=16

# Failed to get the content url
readonly _TTCP_ECONTURL=17

# Credentials are initialized
readonly _TTCP_EINITCRED=124

# Necessary commands are not found
readonly _TTCP_ENOCMD=127

# Terminated by Ctl-C
readonly _TTCP_EINTR=130


# ===============

# Portable and reliable way to get the directory of tha parent of this script.
# (Note to `cd` before `pwd`)
# Based on http://stackoverflow.com/a/246128
# then added zsh support from http://stackoverflow.com/a/23259585 .
_TTCP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-${(%):-%N}}")"; cd ..; pwd)"

# NOTE: "/dev/tty" is bound to the input device of "current process".
# Ref: http://tldp.org/HOWTO/Text-Terminal-HOWTO-7.html#ss7.3
INPUT_DEVICE="/dev/tty"

# Prevent ".ttcopy" being created under root / dir in any case.
# This is quite rare case (but it can be happened).
_USER_HOME="${HOME:-/etc}"
_TTCP_USER_HOME="${_TTCP_USER_HOME:-$_USER_HOME}"
_TTCP_CONFIG_DIR="$_TTCP_USER_HOME/.ttcopy"
_TTCP_CONFIG_FILE="$_TTCP_CONFIG_DIR/config"

# Dependent commands (non POSIX commands)
_TTCP_DEPENDENCIES="${_TTCP_DEPENDENCIES:-yes openssl curl perl gzip}"

_TTCP_HTTP_CLIENT="${_TTCP_HTTP_CLIENT:-curl}"

# Algorithm for encoding data
_TTCP_ENCRYPT_ALGORITHM="${_TTCP_ENCRYPT_ALGORITHM:-aes-256-cbc}"

# Whare the last pasted content stored is.
# It is re-used when you failed to get the remote content.
TTCP_LASTPASTE_PATH_PREFIX="${TMPDIR}/lastPaste_"

TTCP_ID_PREFIX="ttcopy"

# Salt used to encrypt the url of the file you uploaded.
# You can change it to any value (more secure).
# First salt is used for cl1p.net.
TTCP_SALT1="${TTCP_SALT1:-e7a082e7b396}"
# Second salt is used for transfer.sh
TTCP_SALT2="${TTCP_SALT2:-e9a39fe5a1a9}"

# Dependent services
TTCP_CLIP_NET="${TTCP_CLIP_NET:-https://cl1p.net}"
TTCP_TRANSFER_SH="${TTCP_TRANSFER_SH:-https://transfer.sh}"

__ttcp::version () {
    echo "${TTCP_VERSION}"
}

__ttcp::usage () {
    # Get a filename calling the function.
    # http://stackoverflow.com/a/192319/
    local _file="${0##*/}"
    # Remove file's extention
    local _cmd="${_file%.*}"

    echo "  Usage: $_cmd [OPTIONS]"
    echo
    echo "  OPTIONS:"
    echo "  -h, --help                         Output a usage message and exit."
    echo "  -V, --version                      Output the version number of $_cmd and exit."
    echo "  -i ID, --id=ID                     Specify ID to identify the data."
    echo "  -p PASSWORD, --password=PASSWORD   Specify password to encrypt/decrypt the data."
    echo "  --init                             Set default ID and password."
}

__ttcp::opts () {
    # This way supports options which consist continuous letters (like `-Vh`).
    # http://qiita.com/b4b4r07/items/dcd6be0bb9c9185475bb
    while (( $# > 0 ))
    do
        case "$1" in

            # Long options
            --help)
                __ttcp::usage
                exit 0
                ;;
            --version)
                __ttcp::version
                exit 0
                ;;
            --id=*)
                TTCP_ID="${1#--id=}"
                shift
                ;;
            --password=*)
                TTCP_PASSWORD="${1#--password=}"
                shift
                ;;
            --init)
                # exit in the function
                __ttcp::init
                ;;

            # Short options
            -[hVip])
                # For --help
                if [[ "$1" =~ 'h' ]]; then
                    __ttcp::usage
                    exit 0
                fi

                # For --version
                if [[ "$1" =~ 'V' ]]; then
                    __ttcp::version
                    exit 0
                fi

                # For --id
                if [[ "$1" =~ 'i' ]]; then
                    TTCP_ID="$2"
                    shift

                # For --password
                elif [[ "$1" =~ 'p' ]]; then
                    TTCP_PASSWORD="$2"
                    shift
                fi

                # Rotate arguments
                shift
                ;;

            # Other options
            -*)
                # Same error message as `grep` command.
                echo "Invalid option -- '${1#-}'" >&2
                __ttcp::usage
                exit $_TTCP_EINVAL
                ;;

            # Other
            *)
                # Show usage and exit
                echo "Invalid argument -- '${1}'" >&2
                __ttcp::usage
                exit $_TTCP_EINVAL
                ;;

        esac
    done
    return 0
}

__ttcp::unspin () {
    kill $_TTCP_SPIN_PID 2> /dev/null
    tput cnorm >&2 # make the cursor visible
    echo -n $'\r'"`tput el`" >&2
}

__ttcp::spin () {
    local message=$1
    tput civis >&2 # make the cursor invisible

    (
        # Use process substitution instead of the pipe
        # (i.e. `yes "..." | tr ' ' '\n' | while read spin;`)
        # to give the `spin`, in order to avoid creating sub-shell.
        # It could cause the loops be zombie and unable to break it.

        while read spin;
        do
            echo -n "$spin $message "$'\r' >&2
            perl -e 'select(undef, undef, undef, 0.25)' # sleep 0.25s
        done < <(yes "⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏" | tr ' ' '\n')
    )&

    _TTCP_SPIN_PID=$!
}

__ttcp::generate_credentials () {
    TTCP_ID_CLIP=${TTCP_ID_CLIP:-"$(echo "${TTCP_ID}${TTCP_SALT1}" | __ttcp::hash)"}
    TTCP_PASSWORD_CLIP=${TTCP_PASSWORD_CLIP:-"$(echo "${TTCP_PASSWORD}${TTCP_SALT1}" | __ttcp::hash)"}
    TTCP_ID_TRANS=${TTCP_ID_TRANS:-"$(echo "${TTCP_ID}${TTCP_SALT2}" | __ttcp::hash)"}
    TTCP_PASSWORD_TRANS=${TTCP_PASSWORD_TRANS:-"$(echo "${TTCP_PASSWORD}${TTCP_ID}${TTCP_SALT2}" | __ttcp::hash)"}
}

__ttcp::init () {
    # Stop immediately in case of any errors.
    # Because this function may make strange changes.
    set -e

    # Get a filename calling the function.
    # http://stackoverflow.com/a/192319/
    local _file="${0##*/}"
    # Remove file's extention
    local _cmd="${_file%.*}"

    local _given_id=""
    local _given_password1=""
    local _given_password2=""

    # If there is any standard input, discard it.
    # If users try to use ttcopy with stdin for the first time.
    if [ ! -t 0 ]; then
        echo "Standard input is discarded because credentials are not set yet." >&2
        echo "Please try again after setting ID/Password." >&2
        echo >&2
        cat /dev/stdin > /dev/null
    fi

    echo "Set default ID/Password." >&2
    # Following messages are similar to ssh-keygen's one.

    printf "Enter ID for ttcopy/ttpaste: " >&2
    read _given_id < ${INPUT_DEVICE}

    printf "Enter password for ttcopy/ttpaste: " >&2
    read -s _given_password1 < ${INPUT_DEVICE}
    echo >&2

    printf "Enter same password again: " >&2
    read -s _given_password2 < ${INPUT_DEVICE}
    echo >&2

    # Check passwords
    if [[ "$_given_password1" !=  "$_given_password2" ]]; then
        echo "Passwords do not match. Try again." >&2
        exit $_TTCP_EUNMATCH
    fi

    # Try to create a directory to store credentials in any case.
    mkdir -p "$_TTCP_CONFIG_DIR"
    # Force remove in advance, because the file may not have writable attribute.
    rm -f $_TTCP_CONFIG_FILE
    # Create blank file.
    touch $_TTCP_CONFIG_FILE

    TTCP_ID="$_given_id"
    TTCP_PASSWORD="$_given_password1"
    __ttcp::generate_credentials

    echo "TTCP_ID=$TTCP_ID" > $_TTCP_CONFIG_FILE
    echo "TTCP_ID_CLIP=$TTCP_ID_CLIP" >> $_TTCP_CONFIG_FILE
    echo "TTCP_PASSWORD_CLIP=$TTCP_PASSWORD_CLIP" >> $_TTCP_CONFIG_FILE
    echo "TTCP_ID_TRANS=$TTCP_ID_TRANS" >> $_TTCP_CONFIG_FILE
    echo "TTCP_PASSWORD_TRANS=$TTCP_PASSWORD_TRANS" >> $_TTCP_CONFIG_FILE

    # Prohibit users (except for root & current user) from seeing the file.
    chmod 400 $_TTCP_CONFIG_FILE
    echo  >&2
    echo "Created credential file '$_TTCP_CONFIG_FILE'" >&2
    echo "Execute '$_cmd --init' to show this screen again." >&2

    # Unset errexit
    set +e
    exit $_TTCP_EINITCRED
}

__ttcp::load_config () {
    local _file="${_TTCP_CONFIG_FILE:-$1}"
    TTCP_ID="$(cat "$_file"             | head -n 1 | tail -n 1 | sed 's/^TTCP_ID=//')"
    TTCP_ID_CLIP="$(cat "$_file"        | head -n 2 | tail -n 1 | sed 's/^TTCP_ID_CLIP=//')"
    TTCP_PASSWORD_CLIP="$(cat "$_file"  | head -n 3 | tail -n 1 | sed 's/^TTCP_PASSWORD_CLIP=//')"
    TTCP_ID_TRANS="$(cat "$_file"       | head -n 4 | tail -n 1 | sed 's/^TTCP_ID_TRANS=//')"
    TTCP_PASSWORD_TRANS="$(cat "$_file" | head -n 5 | tail -n 1 | sed 's/^TTCP_PASSWORD_TRANS=//')"
    return 0
}

# Config file format: ~/.ttcopy/config
# -------------------------------------------------
# Line1:TTCP_ID=...
# Line2:TTCP_ID_CLIP=...
# Line3:TTCP_PASSWORD_CLIP=...
# Line4:TTCP_ID_TRANS=...
# Line5:TTCP_PASSWORD_TRANS=...
# <EOF>
# -------------------------------------------------
__ttcp::check_config () {
    local _file="${_TTCP_CONFIG_FILE:-$1}"
    local _records="TTCP_ID TTCP_ID_CLIP TTCP_PASSWORD_CLIP TTCP_ID_TRANS TTCP_PASSWORD_TRANS"

    # Check existence of the file.
    if [ ! -e "$_file" ]; then
        # Does not exist.
        return 1
    fi

    # Check format of the file.
    local _counter=0;
    while read _attr ; do
        _counter=$(($_counter + 1))
        cat "$_file" | head -n $_counter | tail -n 1 | grep -qE "^$_attr=.+$"
        # If there is any parts which does not follow the format, return error.
        if [ $? -ne 0 ]; then
            return 1
        fi
    done < <(echo "$_records" | tr ' ' '\n')

    return 0
}

__ttcp::is_credential_valid () {
    [ -z "$TTCP_ID" ] && \
        return $_TTCP_ENOCRED
    [ -z "$TTCP_PASSWORD" ] && \
        return $_TTCP_ENOCRED
    return 0
}

__ttcp::is_dependency_installed () {
    while read cmd ; do
        type $cmd > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "$cmd is required to work." >&2
            exit $_TTCP_ENOCMD
        fi
    done < <(echo "$_TTCP_DEPENDENCIES" | tr ' ' '\n')
    return 0
}

__ttcp::http_client () {
    # If TTCP_PROXY is undefined or empty...
    if [ -z "${TTCP_PROXY}" ]; then
        echo "${_TTCP_HTTP_CLIENT}"
    else
        echo "${_TTCP_HTTP_CLIENT} -x ${TTCP_PROXY}"
    fi
}

# key -- $1
# payload -- stdin
#
# As of 2.0.0, we do not have any plans to use `iv` for encryption.
# iv means "Initialization Vector". "0" is set as the default value.
__ttcp::encode () {
    local _key="$1"
    local _iv="0"
    gzip | openssl "${_TTCP_ENCRYPT_ALGORITHM}" -e -K "$_key" -iv "$_iv"
}

# key -- $1
# payload -- stdin
__ttcp::decode () {
    local _key="$1"
    local _iv="0"
    openssl "${_TTCP_ENCRYPT_ALGORITHM}" -d -K "$_key" -iv "$_iv" | gzip -d
}

__ttcp::hash () {
    # Print hash with hexdump.
    # -binary option is used to
    # surpress unnecessary prefix "(stdin)="
    # reference:
    #     http://unix.stackexchange.com/questions/42797/openssl-dgst-sha1-producing-an-extraneous-stdin-prefix-and-trailing-new
    openssl sha -sha256 -binary | \
        od -tx1 -An | \
        tr -dc '[a-z0-9]'
}

__ttcp::base64enc () {
    openssl base64 | \
        # openssl command would insert new lines in case of long output.
        tr -d '\n' | \
        # use "BASE64URL" format insead of BASE64 to compatible with POST method
        tr -- '+/' '-_'
}

__ttcp::base64dec () {
    tr -- '-_' '+/' | \
        # openssl command would stop
        # if the number of characters on single line exceeds 64...
        # `fold -w` is in POSIX.
        fold -w 64 | \
        openssl base64 -d
}

