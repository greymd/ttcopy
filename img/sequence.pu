@startuml
actor Host
database transfer.sh
database cl1p.net

note right of cl1p.net
    # Fnctions
    * encode(key, data) -- encode data with given key with AES256-CBC and gzip it.
    * decode(key, data) -- decode data with given key with AES256-CBC and un-gzip it.
    * hash(data) -- Create message digest with SHA256.

    # Variables
    * ID ... given by user.
    * PASSWORD ... given by user.
    * SALT1 ... something.
    * SALT2 ... something.

    * DATA ... Data to be delivered.
    * enc-SOMETHING ... encrypted SOMETHING (i,e enc-DATA).

    * ID_CLIP = hash(ID + SALT1)
    * PASSWORD_CLIP = hash(PASSWORD + SALT1)

    * ID_TRANSFER = hash(ID + SALT2)
    * PASSWORD_TRANSFER = hash(PASSWORD + ID + SALT2)

end note

== ttcopy (start) ==

Host -> Host : create DATA
Host -> Host : enc-DATA = encode(PASSWORD_TRANSFER , DATA)
Host -> transfer.sh : enc-DATA
note right : URL : transfer.sh/ID_TRANSFER
activate transfer.sh
transfer.sh -> Host : TRANS_URL
deactivate transfer.sh

Host -> Host : enc-TRANS_URL = encode(PASSWORD_CLIP , TRANS_URL)

Host -> cl1p.net : enc-TRANS_URL
note right : URL : http://cl1p.net/ID_CLIP

activate cl1p.net
cl1p.net -> Host : (HTTP 200 OK)
deactivate cl1p.net

== ttcopy (end) ==

== ttpaste (start) ==

Host -> cl1p.net : (HTTP Request)
note right : URL : http://cl1p.net/ID_CLIP
activate cl1p.net
cl1p.net -> Host : enc-TRANS_URL
Host -> Host : TRANS_URL = decode(PASSWORD_CLIP , enc-TRANS_URL)
deactivate cl1p.net

Host -> transfer.sh : (HTTP Request)
note right : URL : TRANS_URL
activate transfer.sh
transfer.sh -> Host : enc-DATA
Host -> Host : DATA = decode(PASSWORD_TRANSFER , enc-DATA)
deactivate transfer.sh
Host -> Host : print(DATA)

== ttpaste (end) ==

@enduml
